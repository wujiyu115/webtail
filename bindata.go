// Code generated by go-bindata.
// sources:
// data/template/err_page.html
// data/template/index.html
// data/template/realtime_err.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataTemplateErr_pageHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x8f\x23\x35\x13\xbe\xe7\x57\xd4\x9b\x77\x0e\x30\x9a\xa4\x67\xb4\x1f\x42\x8d\x13\x84\x06\x16\x21\x21\xd8\x03\x17\x8e\x95\xb6\xbb\xdb\x5a\xc7\x6e\xec\x4a\x76\x42\xab\x8f\x1c\x38\x70\x02\x69\xc5\x91\x33\x12\x0b\x12\x70\x41\x5c\xf8\x2f\x83\x76\xfe\x05\x6a\x77\x77\xe2\x24\x9d\x99\x0c\x12\x12\x87\xf5\x48\x13\xab\xbe\x9e\xa7\x1e\xbb\x62\x85\xfd\xef\xbd\x4f\x2e\x3f\xfd\xec\xe9\xfb\x90\xd3\x5c\x4d\x07\xac\xf9\x18\xb0\x5c\x20\x9f\x0e\x00\x00\x18\x49\x52\x62\xca\xa2\xe6\xb3\xb1\x39\x5a\x29\x01\xb4\x2a\xc4\x64\x48\xe2\x8a\xa2\xc4\xb9\x61\xe3\x23\x9c\x29\x31\xce\xac\xe4\x7e\x07\xa5\xb7\xd6\x2b\x35\x9a\x46\x29\xce\xa5\x5a\xc5\xb0\x14\x96\xa3\xc6\x33\x40\x2b\x51\x9d\x81\x43\xed\x46\x4e\x58\x99\xbe\xbd\x9d\xe0\xe4\x17\x22\x86\x8b\x8b\xe2\x6a\xe3\x48\x8c\x32\x36\x86\xff\x3f\xf0\x6b\x63\x9f\x19\xcb\x85\x1d\x3d\x97\x9c\xf2\x18\xb6\x52\x5a\x57\x97\xf9\xd8\xaf\x3e\xb7\xc2\xc2\x89\x18\xba\x5d\x13\x52\xf9\xff\xbd\xfd\x51\x1e\xb4\x78\x0b\x81\x02\x39\x97\x3a\x8b\xe1\xad\x1e\x5a\x5e\xcf\x18\x9c\x51\x92\x1f\xcf\x19\x93\x67\x99\x35\x0b\xcd\xd7\x21\x5c\xd4\x7f\x77\x73\xe6\xff\x21\xce\xa9\x5f\x7b\x9c\x17\x6a\x5c\x60\x26\x35\x92\x34\x3a\xa0\xcb\xa5\x2b\x14\xae\x62\x90\x5a\x49\x2d\x46\x33\x65\x92\x67\x3d\x94\xcf\x37\xb6\x39\xda\x4c\xea\xb5\xe9\x20\x88\x92\x87\x71\xee\x4e\xc5\x20\xb9\xed\x6d\xa6\x30\xe4\x96\x2a\x83\x14\x83\x12\x29\xf5\x6b\x0c\x17\x8f\x43\xa1\xeb\xc9\x1a\x71\x91\x18\xeb\x41\x62\xd0\xe6\x08\x22\x63\x4c\x48\x2e\xc3\xc1\xeb\x11\xfd\xe1\xe5\xbb\x4f\x1e\x9d\xef\x4d\xd4\xf3\x5c\xd2\x31\xad\xc6\xb9\x59\x0a\x1b\x6b\x43\x6f\xb4\x70\x6f\xde\x8e\xc7\x39\xbf\x9f\x82\xed\x3d\xb2\xc8\xe5\xc2\xc5\xf0\xa8\xd3\xe5\x7e\x8d\xdf\xbf\xc8\x16\x09\xb2\xa8\x9d\x6c\xb4\xdf\x6d\x0a\xc6\x0f\xdc\x3f\x69\xc9\x8f\x58\x33\x35\x81\x2c\xf5\x8a\x4e\xe1\x03\x8b\x2b\x38\x8d\x76\xcb\x6e\x17\x8d\x53\x69\x1d\x8d\x92\x5c\x2a\xde\xa7\x19\x99\x62\x54\xdf\xb1\xfd\xbe\x83\xa0\x99\x21\x32\xf3\x03\x71\x87\xa1\x15\xde\x85\x6c\x65\x96\x1f\x05\x7d\x20\xf0\x58\x35\xd7\x43\x0d\x0f\x43\x8c\xe8\x14\xce\x41\x3a\x48\x8d\x05\x32\x05\xa0\xe6\xd0\x00\x8e\xe1\x89\x10\x0a\x52\x2b\x04\x90\x81\x24\x47\x9d\x09\x90\xd4\xa3\x37\x97\xcb\x71\x22\x34\x09\x1b\x5e\x86\x7a\x1a\x51\xc9\x4c\xc7\xd0\x38\x43\xc2\x2c\xf2\xdf\x87\xd3\x01\x8b\x9a\xb7\x73\xc0\x66\x86\xaf\xda\xf7\x92\xcb\x25\x24\x0a\x9d\x9b\x0c\x71\x3e\x4a\xd2\xf6\xad\xac\xd7\xf5\x97\x3f\xbf\xfa\xf1\xa7\xb2\xec\x5a\x35\x76\x4c\x86\x50\x15\x98\x09\x57\x55\x70\xf3\xfd\xaf\x70\xfd\xc7\x37\xd7\x5f\x7d\x5d\xef\xb6\xe2\x92\x85\xb5\x75\x58\x55\xad\xab\xed\x20\xa5\x36\x40\xf2\xfe\x85\xea\xdc\x1b\x69\x77\x62\x7c\x9c\x92\x5d\xdc\x70\xca\x10\x72\x2b\xd2\xc9\x30\x12\x0d\xe0\x3b\xc9\xc2\x3e\xc5\x4c\x4c\xb6\xe8\xf8\x6b\xd9\xf0\x19\x4e\xff\xfc\x81\x45\x38\x65\x91\x92\xfb\xc5\xcb\xd2\x7a\xed\x4f\xa4\xe6\xe2\xea\xec\xa4\xce\x81\x78\x02\x41\xad\xb6\xfb\x5e\x5e\x65\x29\x53\x10\x9f\xc3\x49\x8f\x14\xd0\x14\xab\xaa\x4e\x03\xff\x95\x30\x84\xb2\x14\x9a\x57\xd5\xad\xad\x9c\x74\xdc\xd7\xdb\xdb\x5a\xf0\xf5\xfa\xf8\x1d\x2b\x57\x3d\x4a\x6b\xb5\x7e\xef\x87\x62\xd1\x42\x6d\x2c\x2c\xe2\x72\xd9\xde\xa8\x60\xdb\xbc\xe9\x6d\xc3\xeb\x47\x3e\x38\x54\x46\x76\xa7\x2c\xe5\x53\xc9\x59\x44\xf9\xbe\xfd\xe6\xdb\xef\x5e\xbd\x7c\xd9\xef\xfb\xeb\xc5\x6f\x37\x2f\x7e\xd9\xf6\xb1\x28\xac\xbe\x7b\xb4\x1c\x09\xfd\xd1\x0a\x6b\x8d\x0d\x4f\xb4\x87\x14\xaf\x95\xaf\x33\xc6\x1f\xf2\x5a\x7c\xe2\xfb\x11\xac\xb0\x62\x1d\xf6\x91\xc9\x3e\xc6\xb9\x3f\xa8\xda\xdc\x9f\xd1\x05\x5f\x5a\x81\x24\xf6\x0a\xef\xf2\xdf\x9c\x2b\x8b\xbc\x90\xaf\x47\xf8\xf5\x08\xff\x8b\x23\xcc\xa2\xe6\x9d\xa8\x1f\x0e\xff\xe3\xeb\xef\x00\x00\x00\xff\xff\x8b\x63\x67\x9d\x94\x0d\x00\x00")

func dataTemplateErr_pageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataTemplateErr_pageHtml,
		"data/template/err_page.html",
	)
}

func dataTemplateErr_pageHtml() (*asset, error) {
	bytes, err := dataTemplateErr_pageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/template/err_page.html", size: 3476, mode: os.FileMode(436), modTime: time.Unix(1492599867, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTemplateIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\x3b\x4e\xc4\x30\x10\xed\x73\x8a\x21\x7d\x70\x1f\xbc\x6e\x80\x1a\x0a\x1a\xaa\xd5\x24\x19\x36\x16\x8e\x1d\x39\xc3\x27\x20\x0a\xee\x80\x14\xd1\x20\x51\xd0\x92\x8e\x76\x2f\xc3\x46\x70\x0b\x94\x78\xb5\x5b\x11\x37\x23\xcf\xfb\xe8\x3d\x8d\x3c\x38\x39\x3b\xbe\xb8\x3c\x3f\x85\x92\x2b\xa3\x22\x19\x46\x24\x4b\xc2\x42\x45\x00\x00\x92\x35\x1b\x52\x52\x84\x19\x76\x0d\xb7\x86\x80\xdb\x9a\x16\x31\xd3\x3d\x8b\xbc\x69\xe2\x80\xe1\x61\x76\xc3\xec\x2c\x3c\x4e\xdf\xf1\x25\x77\x94\x5d\x6b\x4e\xb0\xae\x09\x3d\xda\x9c\x52\x08\xa4\xa3\x3d\xa7\x72\x0f\xb3\x84\x39\x6c\x8c\x90\x14\x94\x3b\x8f\xac\x9d\x4d\xc1\x3a\x4b\x7b\x38\x77\xc6\xf9\x14\xb4\xd5\xac\xd1\x84\xfd\x53\x28\x22\xa6\x26\x2a\x92\x22\x34\x8e\x64\xe6\x8a\x76\xdb\xb2\xd0\xb7\x6a\x67\x22\x11\x4a\x4f\x57\x8b\x58\x78\x42\xc3\xba\xa2\x25\x79\x1f\x83\xda\x7c\xbe\x0d\xdd\x97\x71\xab\xef\xf5\xfb\xf0\xdc\x4b\x81\x5b\xb9\xd8\xe9\x65\xe6\xc5\xbc\x27\x79\xbf\xac\x71\x45\x31\xa8\xdf\x97\xd7\x9f\xbe\x1f\xba\x8f\xcd\xba\xfb\xdf\x4c\x8a\x10\x74\x4c\x3e\xdd\xec\x2f\x00\x00\xff\xff\xb7\xb4\x6d\xad\xcb\x01\x00\x00")

func dataTemplateIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataTemplateIndexHtml,
		"data/template/index.html",
	)
}

func dataTemplateIndexHtml() (*asset, error) {
	bytes, err := dataTemplateIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/template/index.html", size: 459, mode: os.FileMode(436), modTime: time.Unix(1492606264, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTemplateRealtime_errHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4b\x8f\xdb\x36\x10\xbe\xfb\x57\x4c\x99\x14\x2b\x21\x36\x69\x39\x69\x81\x55\x64\x5d\xda\x02\x3d\x14\x49\xd0\x6c\x91\x33\x2d\x8e\x25\xee\x52\x24\x4b\xd2\x91\x5d\x43\xff\xbd\x90\xe4\xa7\xbc\x8b\x8d\x0f\x84\x67\x3e\x72\x1e\xdf\x3c\x94\x55\xa1\x56\xf9\x24\xab\x90\x8b\x7c\x02\x00\x90\x05\x19\x14\xe6\xdf\x70\xf5\xc0\xa5\xca\xd8\x20\x0e\x90\x2f\x9c\xb4\x01\xbc\x2b\x96\xa4\x0a\xc1\xfa\x94\x31\xfe\xc8\xb7\xb4\x34\xa6\x54\xc8\xad\xf4\xb4\x30\x75\xaf\x63\x4a\xae\x3c\x7b\xfc\x77\x83\x6e\xc7\xde\xd3\x84\x26\x07\x81\xd6\x52\xd3\x47\x4f\xf2\x8c\x0d\xf6\x8e\xc6\xc3\x4e\x21\x84\x9d\xc5\x25\x09\xb8\x0d\xac\xf0\x9e\x0c\x58\xf7\x5b\x19\xb1\x83\xfd\x49\xec\x55\xbc\x78\x2a\x9d\xd9\x68\x31\x2b\x8c\x32\x2e\x85\xa6\x92\x01\x3f\x5e\x5d\x3a\x20\x2b\xc5\x8b\xa7\x6b\x64\x6d\x74\x48\x21\x79\x6f\xb7\x2c\xa1\x1f\xa0\x36\x9a\x17\x66\x0a\xe4\x37\xb3\x71\x12\x1d\x7c\xc2\x86\x4c\xe1\x20\x4d\x3b\xdc\x78\xcb\x8b\x91\xfd\x9a\xbb\x52\xea\x14\xe6\x76\x7b\x0d\x58\x2e\x84\xd4\x65\x0a\xc9\xdc\x6e\xfb\xe3\x8c\xb7\x93\xd3\xdf\x2a\x79\x35\xab\x37\x8b\xc5\xe2\xd9\xa4\x4a\x87\xa8\x77\xa8\x94\x69\x6e\x53\x9b\x79\xf9\x1f\xa6\x90\xd0\x05\xd6\xcf\xa0\x0d\xca\xb2\x0a\x29\xfc\x3a\x9f\x8f\xe2\x36\x5e\x06\x69\x74\x0a\x6b\xb9\x45\x71\x0d\x36\x52\x84\xaa\x4b\x69\xfe\xf3\x0b\x34\x5c\xab\x83\xb1\x37\x3a\x85\xeb\x70\xa3\x3c\xb1\xf5\x8b\xdd\xc2\xe2\x25\xb2\xde\xd4\xe8\x3d\x2f\xd1\x8f\x38\x3b\x7a\xef\xa9\x3e\xd2\xfd\x5a\x49\x6e\xe0\x23\xdd\xf7\xf7\xf7\xaf\x78\xb7\x23\xff\x7d\xdf\xcd\xfa\xee\x48\xc1\x3a\x9c\x35\x8e\xdb\x11\x73\xc6\x89\x5e\x9d\xc2\xca\x21\x7f\x9a\x75\x8a\x1f\x6d\x55\x25\x35\xce\xaa\x43\xc5\x6e\xc9\xbf\x2c\xf7\x87\x6b\xea\xba\x33\x63\xfd\x6c\xe5\x93\x8c\x0d\x73\x9e\x75\xc3\xd4\x4d\x7d\x92\xef\xf7\xf4\x2f\x53\xb6\x6d\xc6\xaa\x24\x9f\x64\x42\x7e\x07\x29\x96\xe4\x98\x69\x37\xa5\x42\x7e\xcf\x27\xd9\xe5\xac\xbe\x8d\x84\x29\x36\x35\xea\x10\x53\x87\x5c\xec\xa2\xf5\x46\x17\x5d\xd3\x40\x14\x5f\x50\x23\xd7\x10\x35\x52\x0b\xd3\xd0\x6f\xb8\xfa\x6a\x8a\x27\x0c\xf1\x98\x3a\x0f\x4b\xd0\xd8\xc0\xe9\x46\x44\x9a\x6e\xb1\xec\xf7\xf4\x4f\xe3\x43\xdb\xb2\xb5\xe9\x3a\x9c\xc4\x23\x42\x3d\x35\xfa\x10\x27\x2c\xe1\x1c\x01\x8e\x5d\x0c\x21\x93\x53\xf9\x48\x4c\xb9\xb5\xa8\x45\x44\x32\x9b\x13\x78\x07\x48\x05\x0f\x1c\xde\x01\xc9\x98\xcd\xc7\x9e\x86\xda\x68\x6f\x14\x52\x65\xca\x88\x34\xb8\xf2\x7d\xa8\x29\x9c\x5f\x3f\xf3\xe8\x6d\x74\xd7\xed\xd7\x69\xbf\xbc\xee\x62\xca\xb5\xac\x79\xc0\x68\xef\x0b\x67\x94\x7a\xe8\x86\xe3\x92\xcb\xa1\xc2\x51\xdc\x4e\xe1\x6e\xcd\x7d\xb8\x1b\xd9\x6c\x2f\x2a\x0b\xa8\x3c\x8e\x12\xe5\x0a\x5d\x88\xc8\x89\x49\xf8\xf4\xf9\x01\xbe\xfe\xf3\xe5\xcb\xe7\xbf\x1f\xfe\xf8\xfd\xa7\xcb\xbc\x86\xce\x68\xe3\x8f\x93\xf3\x1a\xce\xd8\xa1\x2f\xd8\xf0\x55\xf8\x3f\x00\x00\xff\xff\xf0\x94\x14\x9e\x1d\x06\x00\x00")

func dataTemplateRealtime_errHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataTemplateRealtime_errHtml,
		"data/template/realtime_err.html",
	)
}

func dataTemplateRealtime_errHtml() (*asset, error) {
	bytes, err := dataTemplateRealtime_errHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/template/realtime_err.html", size: 1565, mode: os.FileMode(436), modTime: time.Unix(1492573281, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/template/err_page.html":     dataTemplateErr_pageHtml,
	"data/template/index.html":        dataTemplateIndexHtml,
	"data/template/realtime_err.html": dataTemplateRealtime_errHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"template": &bintree{nil, map[string]*bintree{
			"err_page.html":     &bintree{dataTemplateErr_pageHtml, map[string]*bintree{}},
			"index.html":        &bintree{dataTemplateIndexHtml, map[string]*bintree{}},
			"realtime_err.html": &bintree{dataTemplateRealtime_errHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
